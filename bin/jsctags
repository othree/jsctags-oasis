#!/usr/bin/env node

const format = require('util').format;
const forceArray = require('force-array');
const program = require('commander');
const path = require('path');
const glob = require('glob');
const collect = require('collect-stream');
const flatten = require('lodash.flatten');
const async = require('async');
const fs = require('fs');

const jsctags = require('../');

const collection = (val, memo) => {
  memo.push(val);
  return memo;
};

program
  .version('0.0.1')
  .usage('[options] <file ...>')
  .option('--json', 'Output json format.')
  .option('--find <pattern>', 'Use pattern to find file and generate tag file.', collection, [])
  .option('--file <file>', 'File to generate tag file.')
  .option('--dir <dir>', 'Dir to generate tag file.')
  .option('--excmd <cmd>', 'Determines the type of EX command used to locate tags in the source file.', /^(number|pattern)$/i, 'pattern')
  .option('-n, --excmd=number', 'Equivalent to --excmd=number.')
  .option('-N, --excmd=pattern', 'Equivalent to --excmd=pattern.')
  .option('-f <file>', 'Use the name specified by tagfile for the tag file. Default is "tags"', null, 'tags')
  .parse(process.argv);

if (program['excmd=number']) {
  program.excmd = 'number';
} else if (program['excmd=pattern']) {
  program.excmd = 'pattern';
}

const outputStream = program.F === '-' ? process.stdout : fs.createWriteStream(program.F);

const dir = (function () {
  if (program.dir) {
    return path.resolve(program.dir);
  }

  if (program.file) {
    return path.dirname(program.file);
  }

  if (program.args.length) {
    return path.dirname(program.args[0]);
  }

  return '///null';
})();

const file = (function () {
  if (program.file) {
    return path.resolve(process.cwd(), program.file);
  }

  if (!program.args.length && !program.find) {
    return format('///null/%s', Math.floor(Math.random() * 100));
  }

  const find = forceArray(program.find);
  const files = find.length ?
    find.reduce((files, pattern) => {
      return files.concat(
        glob.sync(pattern, {
          nosort: true,
          silent: true
        })
      );
    }, []) :
    program.args;

  return files.map(file => {
    return path.resolve(process.cwd(), file);
  });
})();

const outputTags = function (tags, options) {
  const ctags = flatten(jsctags.ctags(tags, options));
  outputStream.write(ctags.join(''));
  outputStream.end();
};

const outputJSON = function (tags) {
  outputStream.write(JSON.stringify(flatten(forceArray(tags)), null, 2));
  outputStream.end();
};

const onResults = function (err, results) {
  if (err) {
    throw err;
  }

  const fn = program.json ? outputJSON : outputTags;

  const tags = results.filter(res => {
    if (res instanceof Error) {
      console.error(err);
      return false;
    }

    return true;
  });

  tags.tagfile = results.tagfile;

  fn(tags, program);
};

const parse = function (ctx, fn) {
  jsctags(ctx, (err, tags) => {
    if (err) {
      return fn(err);
    }

    tags.tagfile = ctx.file;
    tags.forEach(tag => {
      tag.tagfile = ctx.file;
    });

    fn(err, tags);
  });
};

const fromStdin = function () {
  collect(process.stdin, (err, content) => {
    if (err) {
      throw err;
    }

    if (Buffer.isBuffer(content)) {
      content = content.toString();
    }

    parse(
      {
        file,
        dir,
        content
      },
      onResults
    );
  });
};

const fromFiles = function () {
  const files = Array.isArray(file) ? file : [file];
  async.map(
    files,
    (file, fn) => {
      fs.readFile(file, 'utf8', (err, content) => {
        if (err) {
          return fn(null, err);
        }

        parse(
          {
            file,
            dir,
            content
          },
          fn
        );
      });
    },
    onResults
  );
};

(!program.args.length && !program.find ? fromStdin : fromFiles)();
