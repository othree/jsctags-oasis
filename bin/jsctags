#!/usr/bin/env node

const minimist = require('minimist');
const path = require('path');
const glob = require('glob');
// const collect = require('collect-stream');
const flatten = require('lodash.flatten');
const sortBy = require('lodash.sortby');
const async = require('async');
const fs = require('fs');

const jsctags = require('../');

const loadDefaults = files => {
  return flatten(flatten([files]).map(file => {
    try {
      return fs.readFileSync(file).split(/\n/g).filter(_ => _);
    } catch (error) {
      return [];
    }
  }));
};

const minimistOptions = {
  string: [
    'f',
    'p',
    'exclude',
    'excmd',
    'map',
    'options',
    'resurce',
    'sort'
  ],
  boolean: [
    'n',
    'N',
    'R',
    'append',
    'json',
    'help',
    'version'
  ],
  alias: {
    o: 'f'
  },
  default: {
    f: 'tags',
    exclude: ['node_modules/**/*'],
    excmd: 'number',
    map: '.js.jsx',
    recurse: 'no',
    sort: 'yes'
  }
};

const argv = process.argv.slice(2);
const pre = minimist(argv, minimistOptions);
const program = pre.options ? pre : minimist([...loadDefaults(pre.options), ...argv], minimistOptions);

if (program.n) {
  program.excmd = 'number';
} else if (program.N) {
  program.excmd = 'pattern';
}

if (program.R) {
  program.recurse = 'yes';
}

if (program.recurse === 'yes' && !program._.length) {
  program._.push('.');
}

if (program.help) {
  console.log(`Usage: jsctags [options] <file ...>

Options:
  -f <tagfile>         Use the name specified by tagfile for the tag file. Default is "tags" (default: "tags")
  -n, --excmd=number   Equivalent to --excmd=number.
  -N, --excmd=pattern  Equivalent to --excmd=pattern.
  -o <tagfile>         Equivalent to -f tagfile.
  -p <path>            Use path as the default directory for each supplied source file
  -R, --recurse=yes    Equivalent to --recurse=yes.
  --exclude <pattern>  Add pattern to a list of excluded files and directories. (default: ["node_modules/**/*"])
  --excmd <cmd>        Determines the type of EX command used to locate tags in the source file. (default: "number")
  --json               Output json format.
  --map <map>          Controls how file names are mapped to JavaScript language. (default: ".js.jsx")
  --recurse <yes|no>   Recurse  into  directories encountered in the list of supplied files. (default: "no")
  --sort <yes|no>      Indicates whether the tag file should be sorted on the tag name (default: "yes")
  --help               Output usage information
  --version            Output the version number`);
  process.exit(1);
}

if (program.version) {
  console.log('jsctags-oasis 0.0.6');
  process.exit(1);
}

if (!program._.length) {
  console.log('jsctags: No files specified. Try "jsctags --help".');
  process.exit(1);
}

const safeReadTags = file => {
  try {
    return fs.readFileSync(file, 'utf8').split(/\n/g).map(line => `${line}\n`);
  } catch (error) { }

  return null;
};

const existingTags = (program.append && program.f !== '-') ? safeReadTags(program.f) : null;

const outputStream = program.f === '-' ? process.stdout : fs.createWriteStream(program.f);

const dir = (function () {
  if (program.p) {
    return path.dirname(path.resolve(program.p));
  }

  return process.cwd();
})();

const extGlob = program.map.replace(/^\./, '').replace(/\./g, ',');

const file = (function () {
  const inputs = program._;
  const files = program.recurse === 'yes' ?
    inputs.reduce((files, file) => {
      const isdir = fs.lstatSync(file).isDirectory();

      if (isdir) {
        const pattern = path.join(path.relative(process.cwd(), path.resolve(file)), '**/*.{' + extGlob + '}');

        return files.concat(glob.sync(pattern, {
          nosort: true,
          silent: true,
          ignore: program.exclude
        }));
      }

      return files.concat(file);
    }, []) :
    inputs;

  return files.map(file => {
    return path.resolve(process.cwd(), file);
  });
})();

const outputTags = function (tags, options) {
  const normalizedTags = program.sort === 'yes' ? sortBy(flatten(tags), item => item.name) : flatten(tags);
  const ctags = flatten(jsctags.ctags(normalizedTags, options));
  const resultTags = existingTags ? sortBy(existingTags.concat(ctags), line => line.split(/\t/)[0]) : ctags;

  outputStream.write(resultTags.join(''));
  outputStream.end();
};

const outputJSON = function (tags) {
  outputStream.write(JSON.stringify(flatten(tags), null, 2));
  outputStream.end();
};

const onResults = function (err, results) {
  if (err) {
    throw err;
  }

  const fn = program.json ? outputJSON : outputTags;

  const tags = results.filter(res => {
    if (res instanceof Error) {
      console.error(res);
      return false;
    }

    return true;
  });

  fn(tags, program);
};

const parse = function (ctx, fn) {
  jsctags(ctx, (err, tags) => {
    if (err) {
      return fn(err);
    }

    tags.forEach(tag => {
      tag.tagfile = path.relative(dir, ctx.file);
    });

    fn(err, tags);
  });
};

const fromFiles = function () {
  const files = Array.isArray(file) ? file : [file];
  async.map(
    files,
    (file, fn) => {
      fs.readFile(file, 'utf8', (err, content) => {
        if (err) {
          return fn(null, err);
        }

        parse(
          {
            file,
            dir,
            content
          },
          fn
        );
      });
    },
    onResults
  );
};

fromFiles();
